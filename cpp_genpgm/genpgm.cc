//
//   file: genpgm.cc
//   REA 100604 bringing up to gencc level of changes
//   REA 102904 fixing mktgz.cmd for program name.
//   REA 010405 changing make.cmd and makefile.vc
//   REA 010505 changing make.cmd to call mkclean when switching targets
//   REA 052007 makefile.vc changes
//   REA 092509 make.cmd change
//   REA 101209 script and makefile.vc changes
//   REA 110611 input file name parm index fixed
//   REA 111816 fixing makefile and output spew
//   REA 070317 rid of x86 make and make clean
//   REA 042822 -fmax-errors=3 in make file
//   REA 082822 rid of windoz stuff, add to error note for file open
//   REA 063025 rid of deprec, splitting programs to separate dirs


#include "lists.h"

//*************************************
//*************************************

int main(int argc, char* argv[])
{
lists_register();
ifstream infile;
ofstream ofile;

// make some strlnks to hold parms
strlnk* parm[10];
for (int i=0;i<argc-1;i++)parm[i] = new strlnk(argv[i+1]);
if (argc!=4) {
  cout<<"*******************************************************************\n";
  cout<<"*******************************************************************\n";
  cout<<"   genpgm program rev 2.0 2022\n";
  cout<<"USAGE:\n";
  cout<<"  genpgm <prog_name> <#in files> <#out files>\n";
  cout<<"     creates a cc program <prog_name> with input\n";
  cout<<"     and output files.\n\n";
  cout<<" eg.  genpgm floopy 1 2\n";
  cout<<"        -- generates the program floopy.cc with one input file\n";
  cout<<"           and two output files\n\n";
  cout<<"        -- generates makefile \n";
  cout<<"     \n";
  cout<<"*******************************************************************\n";
  cout<<"*******************************************************************\n";
  return(1);
}
*parm[0]+=".cc";
ofile.open(parm[0]->str1,ios::out);
*parm[0]-=".cc";
ofile<<"// program "<<*parm[0]<<'\n';
ofile<<"// Generated by program genpgm"<<'\n';
ofile<<"//"<<'\n';
ofile<<'\n';
ofile<<"#include \"lists.h\""<<'\n';
ofile<<'\n';
ofile<<"int main(int argc, char* argv[])"<<'\n';
ofile<<"{"<<'\n';
ofile<<"lists_register();"<<'\n';
for (int i=0;i<(parm[1]->to_int());i++){
  ofile<<"ifstream if"<<i<<";"<<'\n';
  }
for (int i=0;i<(parm[2]->to_int());i++){
  ofile<<"ofstream of"<<i<<";"<<'\n';
  }
ofile<<'\n';
ofile<<"strlnk* parm[10]; // up to 10 parms from command line"<<'\n';
ofile<<"for (int i=0;i<argc-1;i++)parm[i] = new strlnk(argv[i+1]);"<<'\n';
ofile<<'\n';
ofile<<"if (argc!="<<(parm[1]->to_int()+parm[2]->to_int()+1)<<") {"<<'\n';
ofile<<"  cout<<\"*******************************************************************\\n\";"<<'\n';
ofile<<"  cout<<\"*******************************************************************\\n\";"<<'\n';
ofile<<"  cout<<\"Operation: ";
ofile<<*parm[0]<<" <in_files> <out_files>\\n\\n\";"<<'\n';
ofile<<"  cout<<\"USAGE:\\n\";"<<'\n';
for (int i=0;i<parm[1]->to_int();i++){
ofile<<"  cout<<\"   <in_file"<<i<<">:\\n\";"<<'\n';}
for (int i=0;i<parm[2]->to_int();i++){
ofile<<"  cout<<\"   <out_file"<<i<<">:\\n\";"<<'\n';}
ofile<<"  cout<<\"*******************************************************************\\n\";"<<'\n';
ofile<<"  cout<<\"*******************************************************************\\n\";"<<'\n';
ofile<<'\n';
ofile<<"return 1;\n";
ofile<<"}\n";
for (int i=0;i<(parm[1]->to_int());i++){
  ofile<<"if"<<i<<".open(parm["<<(i)<<"]->str1,ios::in);"<<'\n';
  ofile<<"if (!if"<<i<<") { \ncerr<<\"Error: cannot open input file \"<<*parm["<<i<<"]"<<"<<\"\\n\";";
  ofile<<"\n}\n";
  }
for (int i=0;i<(parm[2]->to_int());i++){
  ofile<<"of"<<i<<".open(parm["<<(i+parm[1]->to_int())<<"]->str1,ios::out);"<<'\n';
  ofile<<"if (!of"<<i<<") { \ncerr<<\"Error: cannot open output file \"<<*parm["<<i<<"]"<<"<<\"\\n\";";
  ofile<<"\n}\n";
  }
for (int i=0;i<(parm[1]->to_int());i++){
  ofile<<"if"<<i<<".close();"<<'\n';
  }
for (int i=0;i<(parm[2]->to_int());i++){
  ofile<<"of"<<i<<".close();"<<'\n';
  }
ofile<<"return 0;"<<'\n';
ofile<<"}"<<'\n';
ofile<<'\n';
ofile.close();

ofile.open("makefile",ios::out);
if (!ofile) {
	cerr<<"ERROR writing to file: makefile"<<"\n";
	exit(1);
}
cout<<" writing output file: makefile"<<"\n";
ofile<<"CC= g++  -fmax-errors=3 -I ~/include ~/lib/lists.o\n\n";
ofile<<"all: "<<*parm[0]<<" install\n\n";
ofile<<*parm[0]<<": "<<*parm[0]<<".cc ~/lib/lists.o\n";
ofile<<"	$(CC) -o "<<*parm[0]<<" "<<*parm[0]<<".cc\n\n";
ofile<<"install: ~/bin/"<<*parm[0]<<"\n\n";
ofile<<"~/bin/"<<*parm[0]<<": "<<*parm[0]<<"\n";
ofile<<"	cp "<<*parm[0]<<" ~/bin\n";
ofile<<"\n";
ofile<<"clean:\n";
ofile<<"	rm -f "<<*parm[0]<<" ~/bin/"<<*parm[0]<<"\n";
ofile.close();

return 0;
}
